'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Button } from '@/components/ui/Button';
import { Menu, X, User, LogOut, ChevronDown, Search, Briefcase, Users, Bell, PlusCircle, Building2 } from 'lucide-react';
import { LucideIcon } from 'lucide-react';
import { useAuth } from '@/app/contexts/AuthContext';
import { useRouter, usePathname } from 'next/navigation';

interface NavigationLink {
  href: string;
  label: string;
  icon?: LucideIcon;
  requiresAuth?: boolean;
}

export function Navbar() {
  const router = useRouter();
  const pathname = usePathname();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isProfileOpen, setIsProfileOpen] = useState(false);
  const { user, loading, logout } = useAuth();
  const [isInitialized, setIsInitialized] = useState(false);

  useEffect(() => {
    console.log('Estado do usuário na Navbar:', {
      isAuthenticated: !!user,
      userType: user?.userType,
      email: user?.email
    });

    const token = localStorage.getItem('authToken');
    const isAuthenticated = !!user && !!token;
    setIsInitialized(true);

    console.log('Estado de autenticação:', {
      token: !!token,
      isAuthenticated,
      userType: user?.userType
    });
  }, [user]);

  useEffect(() => {
    setIsMenuOpen(false);
    setIsProfileOpen(false);
  }, [pathname]);

  const toggleMenu = () => setIsMenuOpen(!isMenuOpen);
  const toggleProfile = () => setIsProfileOpen(!isProfileOpen);

  const handleSignOut = async () => {
    try {
      await logout();
      localStorage.clear();
      window.location.href = '/login';
    } catch (error) {
      console.error('Erro ao fazer logout:', error);
    }
  };

  const getNavigationLinks = (): NavigationLink[] => {
    if (loading || !isInitialized) {
      console.log('Navbar: Loading ou não inicializado', { loading, isInitialized });
      return [];
    }

    if (!user) {
      console.log('Navbar: Usuário não autenticado');
      return [
        { href: '/projetos', label: 'Explorar Projetos', icon: Search },
        { href: '/talentos', label: 'Encontrar Talentos', icon: Users },
        { href: '/como-funciona', label: 'Como Funciona', icon: Briefcase }
      ];
    }

    const userType = user.userType || 'freelancer';
    console.log('Navbar: Tipo de usuário atual:', {
      userType,
      userEmail: user.email,
      userId: user.uid,
      rawUserType: user.userType
    });

    if (userType !== 'freelancer' && userType !== 'company') {
      console.warn('Navbar: Tipo de usuário inválido, usando freelancer como padrão');
      return [
        { href: '/dashboard', label: 'Dashboard', icon: Briefcase, requiresAuth: true },
        { href: '/buscar-projetos', label: 'Buscar Projetos', icon: Search, requiresAuth: true },
        { href: '/minhas-propostas', label: 'Minhas Propostas', icon: Briefcase, requiresAuth: true },
        { href: '/portfolio', label: 'Portfólio', icon: User, requiresAuth: true },
        { href: '/notificacoes', label: 'Notificações', icon: Bell, requiresAuth: true }
      ];
    }

    if (userType === 'freelancer') {
      console.log('Navbar: Retornando links de freelancer');
      return [
        { href: '/dashboard', label: 'Dashboard', icon: Briefcase, requiresAuth: true },
        { href: '/buscar-projetos', label: 'Buscar Projetos', icon: Search, requiresAuth: true },
        { href: '/minhas-propostas', label: 'Minhas Propostas', icon: Briefcase, requiresAuth: true },
        { href: '/portfolio', label: 'Portfólio', icon: User, requiresAuth: true },
        { href: '/notificacoes', label: 'Notificações', icon: Bell, requiresAuth: true }
      ];
    }

    if (userType === 'company') {
      console.log('Navbar: Retornando links de empresa');
      return [
        { href: '/empresa/dashboard', label: 'Dashboard', icon: Briefcase, requiresAuth: true },
        { href: '/empresa/publicar-projeto', label: 'Publicar Projeto', icon: PlusCircle, requiresAuth: true },
        { href: '/empresa/minhas-vagas', label: 'Minhas Vagas', icon: Briefcase, requiresAuth: true },
        { href: '/empresa/propostas', label: 'Propostas', icon: Users, requiresAuth: true },
        { href: '/notificacoes', label: 'Notificações', icon: Bell, requiresAuth: true }
      ];
    }

    console.warn('Navbar: Caso não esperado, retornando links básicos');
    return [
      { href: '/dashboard', label: 'Dashboard', icon: Briefcase, requiresAuth: true },
      { href: '/notificacoes', label: 'Notificações', icon: Bell, requiresAuth: true }
    ];
  };

  const handleNavigation = async (href: string, requiresAuth?: boolean) => {
    console.log('Navegação iniciada:', {
      href,
      requiresAuth,
      userType: user?.userType,
      isAuthenticated: !!user,
      token: !!localStorage.getItem('authToken')
    });

    const token = localStorage.getItem('authToken');
    const isAuthenticated = !!user && !!token;

    if (requiresAuth && !isAuthenticated) {
      console.log('Redirecionando para login - usuário não autenticado');
      const searchParams = new URLSearchParams();
      searchParams.set('redirect', href);
      router.push(`/login?${searchParams.toString()}`);
      return;
    }

    if (href.startsWith('/empresa/')) {
      console.log('Verificando acesso à rota de empresa:', {
        isAuthenticated,
        userType: user?.userType,
        href
      });

      if (!isAuthenticated) {
        console.log('Redirecionando para login - rota de empresa, usuário não autenticado');
        const searchParams = new URLSearchParams();
        searchParams.set('redirect', href);
        router.push(`/login?${searchParams.toString()}`);
        return;
      }
      
      try {
        const response = await fetch('/api/auth/verify', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        if (!response.ok) {
          console.log('Token inválido, redirecionando para login');
          localStorage.removeItem('authToken');
          const searchParams = new URLSearchParams();
          searchParams.set('redirect', href);
          router.push(`/login?${searchParams.toString()}`);
          return;
        }

        if (user?.userType !== 'company') {
          console.log('Acesso negado - usuário não é empresa');
          router.push('/dashboard');
          return;
        }
      } catch (error) {
        console.error('Erro ao verificar token:', error);
      }
    }

    if (href.startsWith('/dashboard') || href.startsWith('/portfolio') || href.startsWith('/minhas-propostas')) {
      if (!isAuthenticated) {
        console.log('Redirecionando para login - rota de freelancer, usuário não autenticado');
        const searchParams = new URLSearchParams();
        searchParams.set('redirect', href);
        router.push(`/login?${searchParams.toString()}`);
        return;
      }

      if (user?.userType !== 'freelancer') {
        console.log('Acesso negado - usuário não é freelancer');
        router.push('/empresa/dashboard');
        return;
      }
    }

    console.log('Navegando para:', href);
    router.push(href);
  };

  const navigationLinks = getNavigationLinks();

  if (!isInitialized) {
    return null;
  }

  if (loading) {
    return (
      <nav className="fixed top-0 left-0 right-0 z-50 bg-white/80 backdrop-blur-lg border-b border-blue-100">
        <div className="container-custom">
          <div className="flex items-center justify-between h-16">
            <Link href="/" className="flex items-center">
              <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl flex items-center justify-center shadow-lg">
                <span className="text-lg font-bold text-white">FP</span>
              </div>
              <span className="ml-2 text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">FreelancePro</span>
            </Link>
            <div className="animate-pulse flex gap-4">
              <div className="h-8 w-24 bg-slate-200 rounded-lg"></div>
              <div className="h-8 w-24 bg-slate-200 rounded-lg"></div>
            </div>
          </div>
        </div>
      </nav>
    );
  }

  return (
    <nav className="fixed top-0 left-0 right-0 z-50 bg-white/80 backdrop-blur-lg border-b border-blue-100 shadow-sm">
      <div className="container-custom">
        <div className="flex items-center justify-between h-16">
          <Link href="/" className="flex items-center group">
            <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl flex items-center justify-center shadow-lg transform group-hover:scale-105 transition-all duration-200">
              <span className="text-lg font-bold text-white">FP</span>
            </div>
            <span className="ml-2 text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">FreelancePro</span>
          </Link>

          <div className="hidden md:flex items-center space-x-1">
            {navigationLinks.map((link) => (
              <button
                key={link.href}
                onClick={() => handleNavigation(link.href, link.requiresAuth)}
                className={`px-4 py-2 rounded-lg flex items-center space-x-2 text-sm font-medium transition-all duration-200
                  ${pathname === link.href
                    ? 'bg-gradient-to-r from-blue-500/10 to-purple-500/10 text-blue-600'
                    : 'text-slate-600 hover:bg-gradient-to-r hover:from-blue-500/5 hover:to-purple-500/5 hover:text-blue-600'
                  }`}
              >
                {link.icon && <link.icon className="w-4 h-4" />}
                <span>{link.label}</span>
              </button>
            ))}
          </div>

          <div className="hidden md:flex items-center space-x-4">
            {!user ? (
              <div className="flex items-center space-x-2">
                <Link href="/login">
                  <button className="px-4 py-2 text-sm font-medium text-slate-600 hover:text-blue-600 transition-colors duration-200">
                    Entrar
                  </button>
                </Link>
                <Link href="/registro">
                  <button className="px-4 py-2 rounded-xl text-sm font-medium text-white bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 transform hover:scale-[1.02] transition-all duration-200">
                    Criar Conta
                  </button>
                </Link>
              </div>
            ) : (
              <div className="relative">
                <button
                  onClick={toggleProfile}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200
                    ${isProfileOpen
                      ? 'bg-gradient-to-r from-blue-500/10 to-purple-500/10 text-blue-600'
                      : 'text-slate-600 hover:bg-gradient-to-r hover:from-blue-500/5 hover:to-purple-500/5'
                    }`}
                >
                  <User className="w-5 h-5" />
                  <span>{user.email}</span>
                  <ChevronDown className={`w-4 h-4 transition-transform duration-200 ${isProfileOpen ? 'rotate-180' : ''}`} />
                </button>

                {isProfileOpen && (
                  <div className="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg border border-slate-200 py-2 animate-in fade-in slide-in-from-top-2">
                    <button
                      onClick={handleSignOut}
                      className="w-full px-4 py-2 text-left text-sm text-slate-600 hover:bg-gradient-to-r hover:from-blue-500/5 hover:to-purple-500/5 hover:text-blue-600 flex items-center space-x-2"
                    >
                      <LogOut className="w-4 h-4" />
                      <span>Sair</span>
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>

          <button
            onClick={toggleMenu}
            className="md:hidden p-2 rounded-lg text-slate-600 hover:bg-gradient-to-r hover:from-blue-500/5 hover:to-purple-500/5 hover:text-blue-600 transition-colors duration-200"
          >
            {isMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
          </button>
        </div>

        {isMenuOpen && (
          <div className="md:hidden bg-white border-t border-slate-100 py-4 animate-in slide-in-from-top-2">
            <div className="space-y-1 px-4">
              {navigationLinks.map((link) => (
                <button
                  key={link.href}
                  onClick={() => handleNavigation(link.href, link.requiresAuth)}
                  className={`w-full px-4 py-2 rounded-lg flex items-center space-x-2 text-sm font-medium transition-all duration-200
                    ${pathname === link.href
                      ? 'bg-gradient-to-r from-blue-500/10 to-purple-500/10 text-blue-600'
                      : 'text-slate-600 hover:bg-gradient-to-r hover:from-blue-500/5 hover:to-purple-500/5 hover:text-blue-600'
                    }`}
                >
                  {link.icon && <link.icon className="w-4 h-4" />}
                  <span>{link.label}</span>
                </button>
              ))}

              {!user ? (
                <div className="space-y-2 mt-4 pt-4 border-t border-slate-100">
                  <Link href="/login" className="block">
                    <button className="w-full px-4 py-2 rounded-lg text-sm font-medium text-slate-600 hover:bg-gradient-to-r hover:from-blue-500/5 hover:to-purple-500/5 hover:text-blue-600 transition-all duration-200">
                      Entrar
                    </button>
                  </Link>
                  <Link href="/registro" className="block">
                    <button className="w-full px-4 py-2 rounded-lg text-sm font-medium text-white bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 transform hover:scale-[1.02] transition-all duration-200">
                      Criar Conta
                    </button>
                  </Link>
                </div>
              ) : (
                <div className="space-y-2 mt-4 pt-4 border-t border-slate-100">
                  <button
                    onClick={handleSignOut}
                    className="w-full px-4 py-2 rounded-lg text-sm font-medium text-slate-600 hover:bg-gradient-to-r hover:from-blue-500/5 hover:to-purple-500/5 hover:text-blue-600 flex items-center space-x-2"
                  >
                    <LogOut className="w-4 h-4" />
                    <span>Sair</span>
                  </button>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </nav>
  );
} 