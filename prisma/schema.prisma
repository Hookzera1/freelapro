// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// SCHEMA TEMPORARIAMENTE SIMPLIFICADO PARA DEPLOY
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  userType  String   @default("freelancer")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String     @id @default(cuid())
  title       String
  description String
  scope       String?
  budget      Float
  deadline    DateTime
  status      String     @default("OPEN") // "OPEN", "IN_PROGRESS", "COMPLETED"
  type        String     @default("fixed") // "fixed", "hourly", "recurring"
  level       String     @default("intermediate") // "beginner", "intermediate", "expert"
  technologies String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relações
  companyId   String
  company     User       @relation("CompanyProjects", fields: [companyId], references: [id])
  freelancerId String?
  freelancer   User?      @relation("FreelancerProjects", fields: [freelancerId], references: [id])
  proposals    Proposal[]
  contract           Contract?

  // Índices
  @@index([companyId])
  @@index([freelancerId])
  @@index([status])
  @@index([type])
  @@index([level])
}

model Proposal {
  id          String   @id @default(cuid())
  message     String
  budget      Float
  status      String   @default("PENDING") // "PENDING", "ACCEPTED", "REJECTED"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relações
  userId      String
  user        User     @relation("UserProposals", fields: [userId], references: [id])
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])

  // Índices
  @@index([userId])
  @@index([projectId])
  @@index([status])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   @default("info")
  read      Boolean  @default(false)
  userId    String
  relatedId String?  // ID do objeto relacionado (contrato, projeto, etc.)
  relatedType String? // Tipo do objeto relacionado (contract, project, etc.)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([relatedId])
}

model Contract {
  id          String   @id @default(cuid())
  projectId   String   @unique
  freelancerId String
  companyId   String
  status      ContractStatus @default(ACTIVE)
  totalAmount Float
  startDate   DateTime @default(now())
  deadline    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancer  User        @relation("FreelancerContracts", fields: [freelancerId], references: [id])
  company     User        @relation("CompanyContracts", fields: [companyId], references: [id])
  milestones  Milestone[]
  messages    Message[]
  reviews     Review[]    // Nova relação com reviews
  
  @@map("contracts")
}

model Milestone {
  id          String   @id @default(cuid())
  contractId  String
  title       String
  description String?
  amount      Float
  dueDate     DateTime
  status      MilestoneStatus @default(PENDING)
  deliverables Json? // Array de strings com entregáveis
  completedAt DateTime?
  approvedAt  DateTime?
  paidAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  contract    Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  logs        MilestoneLog[]
  
  @@map("milestones")
}

model MilestoneLog {
  id            String @id @default(cuid())
  milestoneId   String
  userId        String
  action        String // start, complete, approve, request_revision, pay
  previousStatus String
  newStatus     String
  note          String?
  createdAt     DateTime @default(now())

  // Relacionamentos
  milestone     Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id])

  @@map("milestone_logs")
}

model Message {
  id          String      @id @default(cuid())
  contractId  String
  senderId    String
  content     String
  type        MessageType @default(TEXT)
  attachments Json? // Array de arquivos
  createdAt   DateTime    @default(now())

  // Relacionamentos
  contract    Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  sender      User     @relation(fields: [senderId], references: [id])
  
  @@map("messages")
}

enum ContractStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  DISPUTED
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
  PAID
}

enum MessageType {
  TEXT
  FILE
  MILESTONE_UPDATE
  PAYMENT_REQUEST
  DELIVERY
}

model Review {
  id          String   @id @default(cuid())
  contractId  String
  reviewerId  String   // Quem está avaliando
  revieweeId  String   // Quem está sendo avaliado
  rating      Int      // 1-5 estrelas
  title       String
  comment     String?
  skills      Json?    // Array de skills avaliadas com notas
  criteria    Json?    // Critérios específicos (qualidade, prazo, comunicação, etc.)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  contract    Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  reviewer    User     @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewee    User     @relation("ReviewsReceived", fields: [revieweeId], references: [id])

  // Garantir que só pode haver uma review por contrato por pessoa
  @@unique([contractId, reviewerId])
  @@map("reviews")
}

model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  technologies Json?   // Array de tecnologias usadas
  images      Json?    // Array de URLs de imagens
  links       Json?    // Array de links (demo, github, etc.)
  category    String   // web, mobile, design, etc.
  featured    Boolean  @default(false)
  completedAt DateTime?
  clientName  String?  // Nome do cliente (opcional)
  projectValue Float?  // Valor do projeto (opcional)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
  @@index([featured])
  @@map("portfolio")
}

model Skill {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String   // programming, design, marketing, etc.
  description String?
  createdAt   DateTime @default(now())

  // Relacionamentos
  userSkills  UserSkill[]

  @@index([category])
  @@map("skills")
}

model UserSkill {
  id          String   @id @default(cuid())
  userId      String
  skillId     String
  level       Int      // 1-5 (beginner to expert)
  yearsExp    Int?     // Anos de experiência
  certified   Boolean  @default(false)
  endorsements Int     @default(0) // Número de endorsements
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill       Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
  @@map("user_skills")
} 