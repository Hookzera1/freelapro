generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  name                String?
  companyName         String?
  image               String?
  userType            String         @default("freelancer")
  emailVerified       DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  notifications       Notification[]
  companyProjects     Project[]      @relation("CompanyProjects")
  freelancerProjects  Project[]      @relation("FreelancerProjects")
  proposals           Proposal[]     @relation("UserProposals")
  companyContracts    Contract[]     @relation("CompanyContracts")
  freelancerContracts Contract[]     @relation("FreelancerContracts")
  messages            Message[]
  milestoneLogs       MilestoneLog[]
  portfolio           Portfolio[]
  reviewsReceived     Review[]       @relation("ReviewsReceived")
  reviewsGiven        Review[]       @relation("ReviewsGiven")
  userSkills          UserSkill[]
}

model Project {
  id           String     @id @default(cuid())
  title        String
  description  String
  scope        String?
  budget       Float
  deadline     DateTime
  status       String     @default("OPEN")
  type         String     @default("fixed")
  level        String     @default("intermediate")
  technologies String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  companyId    String
  freelancerId String?
  company      User       @relation("CompanyProjects", fields: [companyId], references: [id])
  freelancer   User?      @relation("FreelancerProjects", fields: [freelancerId], references: [id])
  proposals    Proposal[]
  contract     Contract?

  @@index([companyId])
  @@index([freelancerId])
  @@index([status])
  @@index([type])
  @@index([level])
}

model Proposal {
  id        String   @id @default(cuid())
  message   String
  budget    Float
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation("UserProposals", fields: [userId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([status])
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  message     String
  type        String   @default("info")
  read        Boolean  @default(false)
  userId      String
  relatedId   String?
  relatedType String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([relatedId])
}

model Contract {
  id           String         @id @default(cuid())
  projectId    String         @unique
  freelancerId String
  companyId    String
  status       ContractStatus @default(ACTIVE)
  totalAmount  Float
  startDate    DateTime       @default(now())
  deadline     DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  company      User           @relation("CompanyContracts", fields: [companyId], references: [id])
  freelancer   User           @relation("FreelancerContracts", fields: [freelancerId], references: [id])
  project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages     Message[]
  milestones   Milestone[]
  reviews      Review[]

  @@map("contracts")
}

model Milestone {
  id           String          @id @default(cuid())
  contractId   String
  title        String
  description  String?
  amount       Float
  dueDate      DateTime
  status       MilestoneStatus @default(PENDING)
  deliverables Json?
  completedAt  DateTime?
  approvedAt   DateTime?
  paidAt       DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  logs         MilestoneLog[]
  contract     Contract        @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("milestones")
}

model MilestoneLog {
  id             String    @id @default(cuid())
  milestoneId    String
  userId         String
  action         String
  previousStatus String
  newStatus      String
  note           String?
  createdAt      DateTime  @default(now())
  milestone      Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id])

  @@map("milestone_logs")
}

model Message {
  id          String      @id @default(cuid())
  contractId  String
  senderId    String
  content     String
  type        MessageType @default(TEXT)
  attachments Json?
  createdAt   DateTime    @default(now())
  contract    Contract    @relation(fields: [contractId], references: [id], onDelete: Cascade)
  sender      User        @relation(fields: [senderId], references: [id])

  @@map("messages")
}

model Review {
  id         String   @id @default(cuid())
  contractId String
  reviewerId String
  revieweeId String
  rating     Int
  title      String
  comment    String?
  skills     Json?
  criteria   Json?
  isPublic   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  reviewee   User     @relation("ReviewsReceived", fields: [revieweeId], references: [id])
  reviewer   User     @relation("ReviewsGiven", fields: [reviewerId], references: [id])

  @@unique([contractId, reviewerId])
  @@map("reviews")
}

model Portfolio {
  id           String    @id @default(cuid())
  userId       String
  title        String
  description  String
  technologies Json?
  images       Json?
  links        Json?
  category     String
  featured     Boolean   @default(false)
  completedAt  DateTime?
  clientName   String?
  projectValue Float?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
  @@index([featured])
  @@map("portfolio")
}

model Skill {
  id          String      @id @default(cuid())
  name        String      @unique
  category    String
  description String?
  createdAt   DateTime    @default(now())
  userSkills  UserSkill[]

  @@index([category])
  @@map("skills")
}

model UserSkill {
  id           String   @id @default(cuid())
  userId       String
  skillId      String
  level        Int
  yearsExp     Int?
  certified    Boolean  @default(false)
  endorsements Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  skill        Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
  @@map("user_skills")
}

enum ContractStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  DISPUTED
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
  PAID
}

enum MessageType {
  TEXT
  FILE
  MILESTONE_UPDATE
  PAYMENT_REQUEST
  DELIVERY
}
